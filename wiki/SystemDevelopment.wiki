=System Development=

 * [PhonePart]

==Base Station part==
===Hardware===
Search on the internet for: [http://lmgtfy.com/?q=DAA+Module DAA-module].  
The components that have been investigated can be found below:
 * AS2523: 
  * some problems to be expected with galvanic isolation to telephone network.
  * not easily interfaceable by MCU.
 * AS2533: not chosen, has serial interface and hands free features, but no DTMF-signalling
 * U3716MB-T, U32001, U3900BM, TEA7092, TEA7540, TEA5400, TEA1098: some of these are interesting, but none of them is available.
 * Dry or wet transformer for connecting to telephone line?
  * Dry transformer can't handle DC-voltages, DC-blocking capacitors needed.
  * Wet transformers can handle DC-voltages without saturating.  They are bigger and waste that DC-current off course.
 * AS2540:
  * Created especially for remote control by MCU.
  * Automatic ring detection to MCU
  * SOIC28: easily solderable.
  * keyboard scanning interface
  * no access to digitized voice, no PCM-interface
 * IA3223 + IA3222
  * 56K-modem IC's.
  * Interesting for data applications, not really for voice application.
 * Si3056 + Si3018/19/10
  * 56K-modem IC's.
  * Interesting for data applications, not really for voice application.
 * Si2400 + Si3015
  * 1200bps or slower modem IC.
  * It has a voice codec on board, but it's 14bit at 9600kHz.
 * *[http://www.silabs.com/Marcom%20Documents/Resources/Si3050_PB.pdf Si3050 + Si3019]*
  * PCM interface ([http://en.wikipedia.org/wiki/G.711 ITU-T G.711] codec on board: 8bit/8kHz, supports µ-law and A-law)
  * No isolation transfo needed
  * No optocoupler needed
  * Ring Detector output (can trigger interrupt on MCU)
  * Caller ID detection included
  * Available at Mouser Electronics
 * [http://www.maxim-ic.com/datasheet/index.mvp/id/6806 73M1966B = 73M1906B + 73M1916]
  * Isolation transfo needed
  * Caller ID detection included
  * Available at Mouser Electronics
  * PCM-interface

==CODEC==
The voice information can be sent in an analog or a digital version to the communicating devices.  The choice is made to use digital transmission, because it's then easier to implement control codes in the data.  Embedding control codes in analog signals can be quite complicated (e.g. the analog television signal).
This decision has the drawback that an audio CODEC is needed to convert the analog audio signal to its digital version and vice versa.

There is also need of a compression algorithm.  If voice is digitized at 8kHz (8bit), this will give an audio stream of 64kpbs, which is simply too much to send over a wireless channel.
 * Jennic has its JN5319 that transfers speech over an IEEE802.15.4.  The sampling frequency and resolution are selectable.  A sampling rate of 8kHz at a 16bit resolution lead to a raw bit rate of 128kbps.  By use of ADPCM this is reduced by a factor four to 32kbps.  A WM8510 audio codec is used for that job.
 * [http://en.wikipedia.org/wiki/G.729 ITU-T G.729a(8kbps)] which is used most in VoIP.

Possible ICs:

 * No IC: the Si3050 already includes a [http://en.wikipedia.org/wiki/G.711 ITU-T G.711] codec.
 * AD73311: not chosen.  It delivers 16-bit data.  There is not enough bandwidth to send 16bit data over the wireless channel at the desired sampling rate.
 * TP3054/TP3057: These devices use logarithmic PCM.  
  * They compand an internal 13or 14-bit signal to an 8-bit signal on the digital port.  
  * The companding algorithm works using µ-law for the TP3054 and A-law for the TP3057.   
  * More information to be found on [http://en.wikipedia.org/wiki/G.711 ITU-T G.711].  
  * This functionality is already included in Si3050+Si3019.
 * [http://www.wolfsonmicro.com/products/codecs/WM8510/ WM8510]
 * [http://en.wikipedia.org/wiki/Comparison_of_audio_codecs Several audio codecs on Wikipedia]

==Software==
RTP-protocol can carry G.711 data.  The RTP-protocol gives too much overhead to implement in a simple microcontroller.  A complete IP-stack should be prevented.
 * G.711 Appendix I defines a Packet Loss Concealment (PLC) algorithm to help hide transmission losses in a packetized network.
 * [http://tools.ietf.org/html/rfc5391 RFC5391 RTP Payload Format for G.711.1]
 * [http://www.itu.int/rec/T-REC-G.191/en ITU-T Rec.G.191]

==Operating System==
 * TinyOS targets wireless sensor networks, such as IEEE802.15.4

==Personal Area Network==
 * IEEE802.15.4
  * Low cost modules available
  * Low power (only 1/3 of Bluetooth)
  * Fast wake-up from sleep (tens of milliseconds)
  * Non-beacon & beacon mode (non-beacon mode seems to be faster)
   * Beacon: routers send beacon signal at regular intervals.  All nodes must be awake at that instant in order to receive it.  Precise timing is needed for intervals.
   * Non-beacon: no device needs to be awake regularly.
  * 81 bytes/packet available for upper OSI-layers
  * 2.4GHz-band -> 250kbps (over the air rate)
  * 868MHz-band -> 20kbps (over the air rate)
 * Zigbee
  * Uses IEEE802.15.4 for the lower OSI-layers
  * Three types of devices: coordinators, routers & endpoints
 * Zigbee Pro
  * Zigbee pro offers multicasting, sharing secret keys.
  * Zigbee pro is backwards compatible with Zigbee
 * RF4CE
  * Uses IEEE802.15.4 for the lower OSI-layers
  * Designed to replace remote controls, but it has already been used to make phone calls with it.  See [http://www.google.be/url?sa=t&source=web&cd=1&ved=0CB4QtwIwAA&url=http%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DNhzwm5vgUPc&ei=KADcTYyNNcqeOuTuyfcO&usg=AFQjCNHdgcaPxPAbvCjx5rINE4rpEvgiiw YouTube].
  * Supported by different manufacturers: TI (RemoTI), FreeScale (Beestack Consumer), Renesas, [http://www.st.com/internet/evalboard/product/247094.jsp ST], ...
  * Smaller code size than Zigbee (because mesh-networking is not needed)
 * DASH7
  * Very new, nothing available yet (anno 2011)
  * DASH7 module 500kbps over-the-air at 433MHz (only one module found)
 * Bluetooth
  * Slow wakeup from sleep (typically 3 seconds)
  * Originally designed to replace RS232 cables -> simple implementation.
 * Z-Wave
  * Too slow (only 40kbps)
==Wireless modules==

Microchip IEEE802.15.4 modules:

||Product Family	||Sensitivity dBm	||Power Output dBm	||RSSI	||TX Power Consumption mA	||RX Power Consumption mA	||Clock	||Sleep	||MAC	||MAC Features	||Encryption	||Interface	||Pin Count	||
||MRF24J40MA	||-95.00		||0.00			||Yes	||23.00			||19.00			||20 MHz	||Yes	||Yes	||CSMA-CA		||AES128		||4-wire SPI	||12		||
||MRF24J40MB	||-102.00		||20.00			||Yes	||120.00			||25.00			||20 MHz	||Yes	||Yes	||CSMA-CA		||AES128		||4-wire SPI	||12		||

These modules can handle Zigbee, but that's not necessary.  Because some people find Zigbee too complex, Microchip has its own lightweight (small) protocol stack (MiWi).

RS: overview of Zigbee modules (sorting ascending on price):
 * Microchip's modules are cheapest, no stack included, it's only a radio -> Use MiWi (30kbps) or Zigbee or ...
 * Telegesis: stack included datarate: 20kbps.
 * Atmel: zigbit: only a radio: 2 protocol stacks available
 * XBee: protocol stack included. (cheapest bij Mouser)