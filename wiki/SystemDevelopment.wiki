=System Development=

==Phone part==
===Hardware===
Search on the internet for: [http://lmgtfy.com/?q=SLIC+interface SLIC-interface]
 * STLC3080: not chosen, can't create ringing signal automatically
 * STLC3075: 
  * created especially for wireless local loops
  * it's hard to get (not available at RS, Farnell, Mouser, Digikey)
  * ST states it as an obsolete component
 * [http://www.silabs.com/Marcom%20Documents/Resources/Si3210ProductBrief.pdf Si3210M-FT]
  * active high for enabling DC for ringer
  * € 7,84 at Mouser
  * Extra Si3201-GS (€1.83) needed, or using lots of discrete components
 * *[http://www.silabs.com/Marcom%20Documents/Resources/Si3210ProductBrief.pdf SI3210-GT]* 
  * active low for enabling DC for ringer
  * € 7,03 at Mouser
  * Extra Si3201-GS (€1.83) needed, or using lots of discrete components
  * When ringer is needed, this circuit can not work on 3.3V (datasheet table 21)
 * Si3215 & Si3216 are harder to get (non-stock at Mouser)

==Base Station part==
===Hardware===
Search on the internet for: [http://lmgtfy.com/?q=DAA+Module DAA-module].  
The components that have been investigated can be found below:
 * AS2523: 
  * some problems to be expected with galvanic isolation to telephone network.
  * not easily interfaceable by MCU.
 * AS2533: not chosen, has serial interface and hands free features, but no DTMF-signalling
 * U3716MB-T, U32001, U3900BM, TEA7092, TEA7540, TEA5400, TEA1098: some of these are interesting, but none of them is available.
 * Dry or wet transformer for connecting to telephone line?
  * Dry transformer can't handle DC-voltages, DC-blocking capacitors needed.
  * Wet transformers can handle DC-voltages without saturating.  They are bigger and waste that DC-current off course.
 * AS2540:
  * Created especially for remote control by MCU.
  * Automatic ring detection to MCU
  * SOIC28: easily solderable.
 * IA3223 + IA3222
  * 56K-modem IC's.
  * Interesting for data applications, not really for voice application.
 * Si3056 + Si3018/19/10
  * 56K-modem IC's.
  * Interesting for data applications, not really for voice application.
 * Si2400 + Si3015
  * 1200bps or slower modem IC.
  * It has a voice codec on board, but it's 14bit at 9600kHz.
 * *[http://www.silabs.com/Marcom%20Documents/Resources/Si3050_PB.pdf Si3050 + Si3019]*
  * PCM interface (codec on board: 8bit/8kHz, supports µ-law and A-law)
  * No isolation transfo needed
  * No optocoupler needed
  * Ring Detector output (can trigger interrupt on MCU)
  * Caller ID detection included
  * Available at Mouser Electronics

==CODEC==
The voice information can be sent in an analog or a digital version to the communicating devices.  The choice is made to use digital transmission, because it's then easier to implement control codes in the data.  Embedding control codes in analog signals can be quite complicated (e.g. the analog television signal).
This decision has the drawback that an audio CODEC is needed to convert the analog audio signal to its digital version and vice versa.

There is also need of a compression algorithm.  If voice is digitized at 8kHz (8bit), this will give an audio stream of 64kpbs, which is simply too much to send over a wireless channel.
 * Jennic has its JN5319 that transfers speech over an IEEE802.15.4.  The sampling frequency and resolution are selectable.  A sampling rate of 8kHz at a 16bit resolution lead to a raw bit rate of 128kbps.  By use of ADPCM this is reduced by a factor four to 32kbps.  A WM8510 audio codec is used for that job.
 * [http://en.wikipedia.org/wiki/G.729 ITU-T G.729a(8kbps)] which is used most in VoIP.

Possible ICs:

 * No IC: the Si3050 already includes a codec.
 * AD73311: not chosen.  It delivers 16-bit data.  There is not enough bandwidth to send 16bit data over the wireless channel at the desired sampling rate.
 * TP3054/TP3057: These devices use logarithmic PCM.  
  * They compand an internal 13or 14-bit signal to an 8-bit signal on the digital port.  
  * The companding algorithm works using µ-law for the TP3054 and A-law for the TP3057.   
  * More information to be found on [http://en.wikipedia.org/wiki/G.711 ITU-T G.711].  
  * This functionality is already included in Si3050+Si3019.
 * [http://www.wolfsonmicro.com/products/codecs/WM8510/ WM8510]

==Software==
RTP-protocol can carry G.711 data.  The RTP-protocol gives too much overhead to implement in a simple microcontroller.  A complete IP-stack should be prevented.
 * G.711 Appendix I defines a Packet Loss Concealment (PLC) algorithm to help hide transmission losses in a packetized network.
 * [http://tools.ietf.org/html/rfc5391 RFC5391 RTP Payload Format for G.711.1]
 * [http://www.itu.int/rec/T-REC-G.191/en ITU-T Rec.G.191]

==Operating System==
 * TinyOS targets wireless sensor networks, such as IEEE802.15.4

==Personal Area Network==
 * IEEE802.15.4
  * Low cost modules available
  * Low power (only 1/3 of Bluetooth)
  * Fast wake-up from sleep (tens of milliseconds)
  * Non-beacon & beacon mode (non-beacon mode seems to be faster)
  * 81 bytes/packet available for upper OSI-layers
 * DASH7
  * Very new, nothing available yet (anno 2011)
 * Bluetooth
  * Slow wakeup from sleep (typically 3 seconds)
  * Originally designed to replace RS232 cables -> simple implementation.
 * Z-Wave
  * Too slow (only 40kbps)