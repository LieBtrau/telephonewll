//http://arduino.cc/forum/index.php/topic,44412.0.html
#define FILTERTAPS 5            // The number of taps in your filter, or better the number of coefficients

/*
  LIBRARY CODE STARTS HERE
  
  http://www.arduino.cc/cgi-bin/yabb2/YaBB.pl?num=1279123369
  
  Made into a library by AlphaBeta (www.AlexanderBrevig.com)
  
  Do whatever you want with it.
*/
template<int filterTaps>
class FIR {
      public:
            //construct without coefs
            FIR() {
                  k = 0; //initialize so that we start to read at index 0
                  for (int i=0; i<filterTaps; i++) {      
                        values[i] = 0; // to have a nice start up, fill the array with 0's
                  }
                  //TODO calculate default gain?
                  //TODO calculate default coefs?
            }
            //construct with coefs
            FIR(float newGain, float *newCoefs) {
                  k = 0; //initialize so that we start to read at index 0
                  setGain(newGain);
                  for (int i=0; i<filterTaps; i++) {      
                        values[i] = 0; // to have a nice start up, fill the array with 0's
                  }
                  setCoefficients(newCoefs);
            }
            
            void setGain(float newGain) {gain = newGain;}

            void setCoefficients(float *newCoefs) {
                  for (int i=0; i<filterTaps; i++) {      
                        coef[i] = newCoefs[i];
                  }
            }
            //set coefficient at specified index
            void setCoefficient(int idx, float newCoef) { coef[idx] = newCoef; }
            
            float process(float in) {
                  float out = 0;                        // out is the return variable. It is set to 0 every time we call the filter!

                  values[k] = in;                        // store the input of the routine (contents of the 'in' variable) in the array at the current pointer position

                  for (int i=0; i<filterTaps; i++) {                              // we step through the array
                        out += coef[i] * values[(i + k) % filterTaps];      // ... and add and multiply each value to accumulate the output
                                                                                                //  (i + k) % filterTaps creates a cyclic way of getting through the array
                  }
                  
                  out /= gain;                        // We need to scale the output (unless the coefficients provide unity gain in the passband)

                  k = (k+1) % filterTaps;            // k is increased and wraps around the filterTaps, so next time we will overwrite the oldest saved sample in the array

                  return out;                              // we send the output value back to whoever called the routine
            }
            
      private:
            float values[filterTaps];
            
            float coef[filterTaps];
            
            //declare gain coefficient to scale the output back to normal
            float gain; // set to 1 and input unity to see what this needs to be
            
            int k; // k stores the index of the current array read to create a circular memory through the array
};
/*
  LIBRARY CODE ENDS HERE
*/


FIR<FILTERTAPS> fir;

void setup() {

      Serial.begin(115200);      // open the serial port, I like them fast ;-)
      
      // declare variables for coefficients
      // these should be calculated by hand, or using a tool
      // in case a phase linear filter is required, the coefficients are symmetric
      // for time optimization it seems best to enter symmetric values like below
      float coef[FILTERTAPS] = { 0.021, 0.096, 0.146, 0.096, 0.021};
      fir.setCoefficients(coef);

        //declare gain coefficient to scale the output back to normal
      float gain = 0.38; // set to 1 and input unity to see what this needs to be
      fir.setGain(gain);
}

void loop() {

      // declare input and output variables
      float input = 1; // without a real input, looking at the step respons (input at unity, 1) would be nice to see
      float output = 0; // output as a 0, but that doesn't really matter

      // This is the loop that takes care of calling the FIR filter for some samples

      for (byte n = 0; n < FILTERTAPS + 2; n++) {             // If you like to see the step response, take at least as many cycles as the length of your FIR filter (FILTERTAPS + 1 or 2)
            Serial.print("n= ");            // print the sample number
            Serial.println(n, DEC);
            Serial.println("Now calling fir...");
            output = fir.process(input);            // here we call the fir routine with the input. The value 'fir' spits out is stored in the output variable.
            Serial.print("fir presented the following value= ");
            Serial.println(output);            // just for debugging or to understand what it does, print the output value
      }
      
      while (true) {};                  // endless loop
}
